syntax = "proto3";

package proto;

option go_package = "distributed-llm/proto";

// Node service for P2P communication
service NodeService {
  rpc RegisterNode(RegisterNodeRequest) returns (RegisterNodeResponse);
  rpc GetResources(GetResourcesRequest) returns (GetResourcesResponse);
  rpc ProcessInference(InferenceRequest) returns (InferenceResponse);
  rpc HealthCheck(HealthCheckRequest) returns (HealthCheckResponse);
}

// Messages for node registration
message RegisterNodeRequest {
  string node_id = 1;
  string address = 2;
  int32 port = 3;
  ResourceInfo resources = 4;
}

message RegisterNodeResponse {
  bool success = 1;
  string message = 2;
}

// Resource information
message ResourceInfo {
  int64 cpu_cores = 1;
  int64 memory_mb = 2;
  repeated GPUInfo gpus = 3;
  int32 max_layers = 4;
  int32 used_layers = 5;
}

message GPUInfo {
  string name = 1;
  int64 memory_mb = 2;
  string uuid = 3;
}

// Resource queries
message GetResourcesRequest {
  string node_id = 1;
}

message GetResourcesResponse {
  ResourceInfo resources = 1;
  int32 available_layers = 2;
}

// Inference processing
message InferenceRequest {
  string model_id = 1;
  string prompt = 2;
  int32 max_tokens = 3;
  repeated string layer_assignments = 4;
}

message InferenceResponse {
  bool success = 1;
  string generated_text = 2;
  string error_message = 3;
  int32 tokens_generated = 4;
  float inference_time_ms = 5;
}

// Health checking
message HealthCheckRequest {
  string node_id = 1;
}

message HealthCheckResponse {
  bool healthy = 1;
  string status = 2;
  int64 uptime_seconds = 3;
}
